// Copyright 2022 The Parca Authors
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package agent

import (
	"context"
	"sync"
	"time"

	"github.com/cenkalti/backoff/v4"
	"github.com/go-kit/log"
	"github.com/go-kit/log/level"
	profilestorepb "github.com/parca-dev/parca/gen/proto/go/parca/profilestore/v1alpha1"
	parcadebuginfo "github.com/parca-dev/parca/pkg/debuginfo"
	"google.golang.org/grpc"
	"google.golang.org/protobuf/proto"
)

// BatchWriteClient is a batch writer for profiles.
type BatchWriteClient struct {
	logger        log.Logger
	writeClient   profilestorepb.ProfileStoreServiceClient
	writeInterval time.Duration

	triggerBatch chan struct{}
	batchDone    chan struct{}

	mtx             *sync.RWMutex
	writeRawRequest *profilestorepb.WriteRawRequest

	lastBatchSentAt    time.Time
	lastBatchSendError error
}

func newWriteRawRequest() *profilestorepb.WriteRawRequest {
	return &profilestorepb.WriteRawRequest{
		Series:     []*profilestorepb.RawProfileSeries{},
		Normalized: true, // Since everything generated by the agent is normalized, we can assume this to be true.
	}
}

func NewBatchWriteClient(logger log.Logger, wc profilestorepb.ProfileStoreServiceClient, writeInterval time.Duration) *BatchWriteClient {
	return &BatchWriteClient{
		logger:        logger,
		writeClient:   wc,
		writeInterval: writeInterval,

		writeRawRequest: newWriteRawRequest(),
		mtx:             &sync.RWMutex{},
	}
}

func (b *BatchWriteClient) report(lastBatchSentAt time.Time, lastBatchSendError error) {
	b.mtx.Lock()
	defer b.mtx.Unlock()

	b.lastBatchSentAt = lastBatchSentAt
	b.lastBatchSendError = lastBatchSendError
}

func (b *BatchWriteClient) Run(ctx context.Context) error {
	ticker := time.NewTicker(b.writeInterval)
	defer ticker.Stop()

	for {
		select {
		case <-ctx.Done():
			return ctx.Err()
		case <-ticker.C:
		case <-b.triggerBatch:
		}

		b.report(time.Now(), b.batch(ctx))

		select {
		case b.batchDone <- struct{}{}:
		default:
		}
	}
}

func (b *BatchWriteClient) batch(ctx context.Context) error {
	b.mtx.Lock()
	request := b.writeRawRequest
	b.writeRawRequest = newWriteRawRequest()
	b.mtx.Unlock()

	expbackOff := backoff.NewExponentialBackOff()
	expbackOff.MaxElapsedTime = b.writeInterval         // TODO: Subtract ~10% of interval to account for overhead in loop
	expbackOff.InitialInterval = 500 * time.Millisecond // Let's not retry to aggressively to start with.

	err := backoff.Retry(func() error {
		_, err := b.writeClient.WriteRaw(ctx, request)
		// Only log error if retrying, otherwise it will be logged outside the retry
		if err != nil && expbackOff.NextBackOff().Nanoseconds() > 0 {
			level.Debug(b.logger).Log(
				"msg", "batch write client failed to send profiles",
				"retry", expbackOff.NextBackOff(),
				"count", len(request.Series),
				"err", err,
			)
		}
		return err
	}, expbackOff)
	if err != nil {
		level.Warn(b.logger).Log("msg", "batch write client failed to send profiles", "count", len(request.Series), "err", err)
		return err
	}

	if len(request.Series) > 0 {
		level.Debug(b.logger).Log("msg", "batch write client sent profiles", "count", len(request.Series))
	}
	return nil
}

func isEqualLabel(a, b *profilestorepb.LabelSet) bool {
	if len(a.Labels) != len(b.Labels) {
		return false
	}

	ret := true
	for i := range a.Labels {
		if (a.Labels[i].Name != b.Labels[i].Name) || (a.Labels[i].Value != b.Labels[i].Value) {
			ret = false
		}
	}
	return ret
}

func findIndex(arr []*profilestorepb.RawProfileSeries, p *profilestorepb.RawProfileSeries) (int, bool) {
	for i, val := range arr {
		if isEqualLabel(val.Labels, p.Labels) {
			return i, true
		}
	}
	return -1, false
}

func (b *BatchWriteClient) WriteRaw(ctx context.Context, r *profilestorepb.WriteRawRequest, opts ...grpc.CallOption) (*profilestorepb.WriteRawResponse, error) {
	b.mtx.Lock()
	for _, profileSeries := range r.Series {
		if proto.Size(b.writeRawRequest)+proto.Size(profileSeries) > parcadebuginfo.MaxMsgSize {
			b.mtx.Unlock()
			b.triggerBatch <- struct{}{}
			<-b.batchDone
			b.mtx.Lock()
		}

		if j, ok := findIndex(b.writeRawRequest.Series, profileSeries); ok {
			b.writeRawRequest.Series[j].Samples = append(b.writeRawRequest.Series[j].Samples, profileSeries.Samples...)
			continue
		}

		b.writeRawRequest.Series = append(b.writeRawRequest.Series, &profilestorepb.RawProfileSeries{
			Labels:  profileSeries.Labels,
			Samples: profileSeries.Samples,
		})
	}
	b.mtx.Unlock()

	return &profilestorepb.WriteRawResponse{}, nil
}
